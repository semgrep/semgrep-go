(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_go"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "identifier", None;
  "float_literal", None;
  "false", None;
  "blank_identifier", None;
  "int_literal", None;
  "interpreted_string_literal_basic_content", None;
  "fallthrough_statement", None;
  "empty_statement", None;
  "imaginary_literal", None;
  "iota", None;
  "true", None;
  "rune_literal", None;
  "raw_string_literal", None;
  "escape_sequence", None;
  "dot", None;
  "nil", None;
  "package_clause",
  Some (
    Seq [
      Token (Literal "package");
      Token (Name "identifier");
    ];
  );
  "empty_labeled_statement",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
    ];
  );
  "qualified_type",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "goto_statement",
  Some (
    Seq [
      Token (Literal "goto");
      Token (Name "identifier");
    ];
  );
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "constraint_term",
  Some (
    Seq [
      Opt (
        Token (Literal "~");
      );
      Token (Name "identifier");
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "interpreted_string_literal",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "interpreted_string_literal_basic_content");
          Token (Name "escape_sequence");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "interface_type_name",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "qualified_type");
    |];
  );
  "constraint_elem",
  Some (
    Seq [
      Token (Name "constraint_term");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "constraint_term");
        ];
      );
    ];
  );
  "import_spec",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "dot");
          Token (Name "blank_identifier");
          Token (Name "identifier");
        |];
      );
      Alt [|
        Token (Name "raw_string_literal");
        Token (Name "interpreted_string_literal");
      |];
    ];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "variadic_argument");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "expression");
                Token (Name "variadic_argument");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "assignment_statement",
  Some (
    Seq [
      Token (Name "expression_list");
      Alt [|
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "<<=");
        Token (Literal ">>=");
        Token (Literal "&=");
        Token (Literal "&^=");
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "|=");
        Token (Literal "^=");
        Token (Literal "=");
      |];
      Token (Name "expression_list");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
          Token (Literal "<<");
          Token (Literal ">>");
          Token (Literal "&");
          Token (Literal "&^");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
          Token (Literal "|");
          Token (Literal "^");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal "<");
          Token (Literal "<=");
          Token (Literal ">");
          Token (Literal ">=");
        |];
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
    |];
  );
  "block",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "statement_list");
      );
      Token (Literal "}");
    ];
  );
  "call_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Literal "new");
          Token (Literal "make");
        |];
        Token (Name "special_argument_list");
      ];
      Seq [
        Token (Name "expression");
        Opt (
          Token (Name "type_arguments");
        );
        Token (Name "argument_list");
      ];
    |];
  );
  "channel_type",
  Some (
    Alt [|
      Seq [
        Token (Literal "chan");
        Alt [|
          Token (Name "simple_type");
          Token (Name "parenthesized_type");
        |];
      ];
      Seq [
        Token (Literal "chan");
        Token (Literal "<-");
        Alt [|
          Token (Name "simple_type");
          Token (Name "parenthesized_type");
        |];
      ];
      Seq [
        Token (Literal "<-");
        Token (Literal "chan");
        Alt [|
          Token (Name "simple_type");
          Token (Name "parenthesized_type");
        |];
      ];
    |];
  );
  "communication_case",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "send_statement");
        Token (Name "receive_statement");
      |];
      Token (Literal ":");
      Opt (
        Token (Name "statement_list");
      );
    ];
  );
  "composite_literal",
  Some (
    Seq [
      Alt [|
        Token (Name "map_type");
        Token (Name "slice_type");
        Token (Name "array_type");
        Token (Name "implicit_length_array_type");
        Token (Name "struct_type");
        Token (Name "identifier");
        Token (Name "generic_type");
        Token (Name "qualified_type");
      |];
      Token (Name "literal_value");
    ];
  );
  "const_declaration",
  Some (
    Seq [
      Token (Literal "const");
      Alt [|
        Token (Name "const_spec");
        Seq [
          Token (Literal "(");
          Repeat (
            Seq [
              Token (Name "const_spec");
              Alt [|
                Token (Literal "\n");
                Token (Literal ";");
              |];
            ];
          );
          Token (Literal ")");
        ];
      |];
    ];
  );
  "const_spec",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "simple_type");
              Token (Name "parenthesized_type");
            |];
          );
          Token (Literal "=");
          Token (Name "expression_list");
        ];
      );
    ];
  );
  "dec_statement",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "--");
    ];
  );
  "declaration",
  Some (
    Alt [|
      Token (Name "const_declaration");
      Token (Name "type_declaration");
      Token (Name "var_declaration");
    |];
  );
  "default_case",
  Some (
    Seq [
      Token (Literal "default");
      Token (Literal ":");
      Opt (
        Token (Name "statement_list");
      );
    ];
  );
  "defer_statement",
  Some (
    Seq [
      Token (Literal "defer");
      Token (Name "expression");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "unary_expression");
      Token (Name "binary_expression");
      Token (Name "selector_expression");
      Token (Name "index_expression");
      Token (Name "slice_expression");
      Token (Name "call_expression");
      Token (Name "type_assertion_expression");
      Token (Name "type_conversion_expression");
      Token (Name "identifier");
      Alt [|
        Token (Literal "new");
        Token (Literal "make");
      |];
      Token (Name "composite_literal");
      Token (Name "func_literal");
      Alt [|
        Token (Name "raw_string_literal");
        Token (Name "interpreted_string_literal");
      |];
      Token (Name "int_literal");
      Token (Name "float_literal");
      Token (Name "imaginary_literal");
      Token (Name "rune_literal");
      Token (Name "nil");
      Token (Name "true");
      Token (Name "false");
      Token (Name "iota");
      Token (Name "parenthesized_expression");
    |];
  );
  "expression_case",
  Some (
    Seq [
      Token (Literal "case");
      Token (Name "expression_list");
      Token (Literal ":");
      Opt (
        Token (Name "statement_list");
      );
    ];
  );
  "expression_list",
  Some (
    Seq [
      Token (Name "expression");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
    ];
  );
  "expression_switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Opt (
        Seq [
          Token (Name "simple_statement");
          Token (Literal ";");
        ];
      );
      Opt (
        Token (Name "expression");
      );
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "expression_case");
          Token (Name "default_case");
        |];
      );
      Token (Literal "}");
    ];
  );
  "field_declaration",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
          Alt [|
            Token (Name "simple_type");
            Token (Name "parenthesized_type");
          |];
        ];
        Seq [
          Opt (
            Token (Literal "*");
          );
          Alt [|
            Token (Name "identifier");
            Token (Name "qualified_type");
          |];
        ];
      |];
      Opt (
        Alt [|
          Token (Name "raw_string_literal");
          Token (Name "interpreted_string_literal");
        |];
      );
    ];
  );
  "field_declaration_list",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "field_declaration");
          Repeat (
            Seq [
              Alt [|
                Token (Literal "\n");
                Token (Literal ";");
              |];
              Token (Name "field_declaration");
            ];
          );
          Opt (
            Alt [|
              Token (Literal "\n");
              Token (Literal ";");
            |];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "for_clause",
  Some (
    Seq [
      Opt (
        Token (Name "simple_statement");
      );
      Token (Literal ";");
      Opt (
        Token (Name "expression");
      );
      Token (Literal ";");
      Opt (
        Token (Name "simple_statement");
      );
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "for_clause");
          Token (Name "range_clause");
        |];
      );
      Token (Name "block");
    ];
  );
  "func_literal",
  Some (
    Seq [
      Token (Literal "func");
      Token (Name "parameter_list");
      Opt (
        Alt [|
          Token (Name "parameter_list");
          Token (Name "simple_type");
        |];
      );
      Token (Name "block");
    ];
  );
  "function_type",
  Some (
    Seq [
      Token (Literal "func");
      Token (Name "parameter_list");
      Opt (
        Alt [|
          Token (Name "parameter_list");
          Token (Name "simple_type");
        |];
      );
    ];
  );
  "generic_type",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "qualified_type");
      |];
      Token (Name "type_arguments");
    ];
  );
  "go_statement",
  Some (
    Seq [
      Token (Literal "go");
      Token (Name "expression");
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Opt (
        Seq [
          Token (Name "simple_statement");
          Token (Literal ";");
        ];
      );
      Token (Name "expression");
      Token (Name "block");
      Opt (
        Seq [
          Token (Literal "else");
          Alt [|
            Token (Name "block");
            Token (Name "if_statement");
          |];
        ];
      );
    ];
  );
  "implicit_length_array_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Literal "...");
      Token (Literal "]");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "inc_statement",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "++");
    ];
  );
  "index_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "interface_body",
  Some (
    Alt [|
      Token (Name "method_spec");
      Token (Name "interface_type_name");
      Token (Name "constraint_elem");
      Token (Name "struct_elem");
    |];
  );
  "interface_type",
  Some (
    Seq [
      Token (Literal "interface");
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "interface_body");
          Repeat (
            Seq [
              Alt [|
                Token (Literal "\n");
                Token (Literal ";");
              |];
              Token (Name "interface_body");
            ];
          );
          Opt (
            Alt [|
              Token (Literal "\n");
              Token (Literal ";");
            |];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "keyed_element",
  Some (
    Seq [
      Token (Name "literal_element");
      Token (Literal ":");
      Token (Name "literal_element");
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "statement");
    ];
  );
  "literal_element",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "literal_value");
    |];
  );
  "literal_value",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Opt (
            Seq [
              Alt [|
                Token (Name "literal_element");
                Token (Name "keyed_element");
              |];
              Repeat (
                Seq [
                  Token (Literal ",");
                  Alt [|
                    Token (Name "literal_element");
                    Token (Name "keyed_element");
                  |];
                ];
              );
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "map_type",
  Some (
    Seq [
      Token (Literal "map");
      Token (Literal "[");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Token (Literal "]");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "method_spec",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "parameter_list");
      Opt (
        Alt [|
          Token (Name "parameter_list");
          Token (Name "simple_type");
        |];
      );
    ];
  );
  "parameter_declaration",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
        ];
      );
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "parameter_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Opt (
            Seq [
              Alt [|
                Token (Name "parameter_declaration");
                Token (Name "variadic_parameter_declaration");
              |];
              Repeat (
                Seq [
                  Token (Literal ",");
                  Alt [|
                    Token (Name "parameter_declaration");
                    Token (Name "variadic_parameter_declaration");
                  |];
                ];
              );
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "expression");
      Token (Literal ")");
    ];
  );
  "parenthesized_type",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Token (Literal ")");
    ];
  );
  "pointer_type",
  Some (
    Seq [
      Token (Literal "*");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "range_clause",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "expression_list");
          Alt [|
            Token (Literal "=");
            Token (Literal ":=");
          |];
        ];
      );
      Token (Literal "range");
      Token (Name "expression");
    ];
  );
  "receive_statement",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "expression_list");
          Alt [|
            Token (Literal "=");
            Token (Literal ":=");
          |];
        ];
      );
      Token (Name "expression");
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Token (Name "expression_list");
      );
    ];
  );
  "select_statement",
  Some (
    Seq [
      Token (Literal "select");
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "communication_case");
          Token (Name "default_case");
        |];
      );
      Token (Literal "}");
    ];
  );
  "selector_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "send_statement",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "<-");
      Token (Name "expression");
    ];
  );
  "short_var_declaration",
  Some (
    Seq [
      Token (Name "expression_list");
      Token (Literal ":=");
      Token (Name "expression_list");
    ];
  );
  "simple_statement",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "send_statement");
      Token (Name "inc_statement");
      Token (Name "dec_statement");
      Token (Name "assignment_statement");
      Token (Name "short_var_declaration");
    |];
  );
  "simple_type",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "generic_type");
      Token (Name "qualified_type");
      Token (Name "pointer_type");
      Token (Name "struct_type");
      Token (Name "interface_type");
      Token (Name "array_type");
      Token (Name "slice_type");
      Token (Name "map_type");
      Token (Name "channel_type");
      Token (Name "function_type");
    |];
  );
  "slice_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "[");
      Alt [|
        Seq [
          Opt (
            Token (Name "expression");
          );
          Token (Literal ":");
          Opt (
            Token (Name "expression");
          );
        ];
        Seq [
          Opt (
            Token (Name "expression");
          );
          Token (Literal ":");
          Token (Name "expression");
          Token (Literal ":");
          Token (Name "expression");
        ];
      |];
      Token (Literal "]");
    ];
  );
  "slice_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Literal "]");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "special_argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "expression");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "statement",
  Some (
    Alt [|
      Token (Name "declaration");
      Token (Name "simple_statement");
      Token (Name "return_statement");
      Token (Name "go_statement");
      Token (Name "defer_statement");
      Token (Name "if_statement");
      Token (Name "for_statement");
      Token (Name "expression_switch_statement");
      Token (Name "type_switch_statement");
      Token (Name "select_statement");
      Token (Name "labeled_statement");
      Token (Name "fallthrough_statement");
      Token (Name "break_statement");
      Token (Name "continue_statement");
      Token (Name "goto_statement");
      Token (Name "block");
      Token (Name "empty_statement");
    |];
  );
  "statement_list",
  Some (
    Alt [|
      Seq [
        Token (Name "statement");
        Repeat (
          Seq [
            Alt [|
              Token (Literal "\n");
              Token (Literal ";");
            |];
            Token (Name "statement");
          ];
        );
        Opt (
          Seq [
            Alt [|
              Token (Literal "\n");
              Token (Literal ";");
            |];
            Opt (
              Token (Name "empty_labeled_statement");
            );
          ];
        );
      ];
      Token (Name "empty_labeled_statement");
    |];
  );
  "struct_elem",
  Some (
    Seq [
      Token (Name "struct_term");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "struct_term");
        ];
      );
    ];
  );
  "struct_term",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Literal "~");
          Token (Literal "*");
        |];
      );
      Token (Name "struct_type");
    ];
  );
  "struct_type",
  Some (
    Seq [
      Token (Literal "struct");
      Token (Name "field_declaration_list");
    ];
  );
  "type_alias",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "type_arguments",
  Some (
    Seq [
      Token (Literal "[");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "simple_type");
            Token (Name "parenthesized_type");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "type_assertion_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ".");
      Token (Literal "(");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Token (Literal ")");
    ];
  );
  "type_case",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "simple_type");
            Token (Name "parenthesized_type");
          |];
        ];
      );
      Token (Literal ":");
      Opt (
        Token (Name "statement_list");
      );
    ];
  );
  "type_conversion_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
      Token (Literal "(");
      Token (Name "expression");
      Opt (
        Token (Literal ",");
      );
      Token (Literal ")");
    ];
  );
  "type_declaration",
  Some (
    Seq [
      Token (Literal "type");
      Alt [|
        Token (Name "type_spec");
        Token (Name "type_alias");
        Seq [
          Token (Literal "(");
          Repeat (
            Seq [
              Alt [|
                Token (Name "type_spec");
                Token (Name "type_alias");
              |];
              Alt [|
                Token (Literal "\n");
                Token (Literal ";");
              |];
            ];
          );
          Token (Literal ")");
        ];
      |];
    ];
  );
  "type_parameter_list",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "parameter_declaration");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "parameter_declaration");
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "]");
    ];
  );
  "type_spec",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameter_list");
      );
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "type_switch_header",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "simple_statement");
          Token (Literal ";");
        ];
      );
      Opt (
        Seq [
          Token (Name "expression_list");
          Token (Literal ":=");
        ];
      );
      Token (Name "expression");
      Token (Literal ".");
      Token (Literal "(");
      Token (Literal "type");
      Token (Literal ")");
    ];
  );
  "type_switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "type_switch_header");
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "type_case");
          Token (Name "default_case");
        |];
      );
      Token (Literal "}");
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "+");
        Token (Literal "-");
        Token (Literal "!");
        Token (Literal "^");
        Token (Literal "*");
        Token (Literal "&");
        Token (Literal "<-");
      |];
      Token (Name "expression");
    ];
  );
  "var_declaration",
  Some (
    Seq [
      Token (Literal "var");
      Alt [|
        Token (Name "var_spec");
        Seq [
          Token (Literal "(");
          Repeat (
            Seq [
              Token (Name "var_spec");
              Alt [|
                Token (Literal "\n");
                Token (Literal ";");
              |];
            ];
          );
          Token (Literal ")");
        ];
      |];
    ];
  );
  "var_spec",
  Some (
    Seq [
      Token (Name "identifier");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "identifier");
        ];
      );
      Alt [|
        Seq [
          Alt [|
            Token (Name "simple_type");
            Token (Name "parenthesized_type");
          |];
          Opt (
            Seq [
              Token (Literal "=");
              Token (Name "expression_list");
            ];
          );
        ];
        Seq [
          Token (Literal "=");
          Token (Name "expression_list");
        ];
      |];
    ];
  );
  "variadic_argument",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal "...");
    ];
  );
  "variadic_parameter_declaration",
  Some (
    Seq [
      Opt (
        Token (Name "identifier");
      );
      Token (Literal "...");
      Alt [|
        Token (Name "simple_type");
        Token (Name "parenthesized_type");
      |];
    ];
  );
  "import_spec_list",
  Some (
    Seq [
      Token (Literal "(");
      Repeat (
        Seq [
          Token (Name "import_spec");
          Alt [|
            Token (Literal "\n");
            Token (Literal ";");
          |];
        ];
      );
      Token (Literal ")");
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Token (Literal "func");
      Token (Name "identifier");
      Opt (
        Token (Name "type_parameter_list");
      );
      Token (Name "parameter_list");
      Opt (
        Alt [|
          Token (Name "parameter_list");
          Token (Name "simple_type");
        |];
      );
      Opt (
        Token (Name "block");
      );
    ];
  );
  "method_declaration",
  Some (
    Seq [
      Token (Literal "func");
      Token (Name "parameter_list");
      Token (Name "identifier");
      Token (Name "parameter_list");
      Opt (
        Alt [|
          Token (Name "parameter_list");
          Token (Name "simple_type");
        |];
      );
      Opt (
        Token (Name "block");
      );
    ];
  );
  "import_declaration",
  Some (
    Seq [
      Token (Literal "import");
      Alt [|
        Token (Name "import_spec");
        Token (Name "import_spec_list");
      |];
    ];
  );
  "source_file",
  Some (
    Repeat (
      Alt [|
        Seq [
          Token (Name "statement");
          Alt [|
            Token (Literal "\n");
            Token (Literal ";");
          |];
        ];
        Seq [
          Alt [|
            Token (Name "package_clause");
            Token (Name "function_declaration");
            Token (Name "method_declaration");
            Token (Name "import_declaration");
          |];
          Opt (
            Alt [|
              Token (Literal "\n");
              Token (Literal ";");
            |];
          );
        ];
      |];
    );
  );
]

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_literal ((kind, body) : mt) : CST.float_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_blank_identifier ((kind, body) : mt) : CST.blank_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_int_literal ((kind, body) : mt) : CST.int_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_interpreted_string_literal_basic_content ((kind, body) : mt) : CST.interpreted_string_literal_basic_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_fallthrough_statement ((kind, body) : mt) : CST.fallthrough_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imaginary_literal ((kind, body) : mt) : CST.imaginary_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_iota ((kind, body) : mt) : CST.iota =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_rune_literal ((kind, body) : mt) : CST.rune_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_raw_string_literal ((kind, body) : mt) : CST.raw_string_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_dot ((kind, body) : mt) : CST.dot =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nil ((kind, body) : mt) : CST.nil =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_package_clause ((kind, body) : mt) : CST.package_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_empty_labeled_statement ((kind, body) : mt) : CST.empty_labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_qualified_type ((kind, body) : mt) : CST.qualified_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_goto_statement ((kind, body) : mt) : CST.goto_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_constraint_term ((kind, body) : mt) : CST.constraint_term =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_interpreted_string_literal ((kind, body) : mt) : CST.interpreted_string_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Inte_str_lit_basic_content (
                      trans_interpreted_string_literal_basic_content (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_interface_type_name ((kind, body) : mt) : CST.interface_type_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Qual_type (
            trans_qualified_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_constraint_elem ((kind, body) : mt) : CST.constraint_elem =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_constraint_term (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_constraint_term (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_spec ((kind, body) : mt) : CST.import_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Dot (
                      trans_dot (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Blank_id (
                      trans_blank_identifier (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Id (
                      trans_identifier (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Raw_str_lit (
                  trans_raw_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_str_lit (
                  trans_interpreted_string_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let rec trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Vari_arg (
                            trans_variadic_argument (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Vari_arg (
                                      trans_variadic_argument (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_type ((kind, body) : mt) : CST.array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_statement ((kind, body) : mt) : CST.assignment_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression_list (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `AMPHATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression_list (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTLT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `GTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `AMP (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `AMPHAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_choice_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `BAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `HAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_choice_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_statement_list (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_new_spec_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `New (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Make (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_special_argument_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_opt_type_args_arg_list (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_type_arguments (Run.matcher_token v))
                    v1
                  ,
                  trans_argument_list (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_channel_type ((kind, body) : mt) : CST.channel_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Chan_choice_simple_type (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Simple_type (
                        trans_simple_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Paren_type (
                        trans_parenthesized_type (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Chan_LTDASH_choice_simple_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Simple_type (
                        trans_simple_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Paren_type (
                        trans_parenthesized_type (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `LTDASH_chan_choice_simple_type (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Simple_type (
                        trans_simple_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Paren_type (
                        trans_parenthesized_type (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_communication_case ((kind, body) : mt) : CST.communication_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Send_stmt (
                  trans_send_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rece_stmt (
                  trans_receive_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statement_list (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_composite_literal ((kind, body) : mt) : CST.composite_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Map_type (
                  trans_map_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Slice_type (
                  trans_slice_type (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_type (
                  trans_array_type (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Impl_len_array_type (
                  trans_implicit_length_array_type (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Struct_type (
                  trans_struct_type (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Gene_type (
                  trans_generic_type (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Qual_type (
                  trans_qualified_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_literal_value (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_declaration ((kind, body) : mt) : CST.const_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Const_spec (
                  trans_const_spec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_rep_const_spec_choice_LF_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_const_spec (Run.matcher_token v0),
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `LF (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `SEMI (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_const_spec ((kind, body) : mt) : CST.const_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Simple_type (
                                trans_simple_type (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Paren_type (
                                trans_parenthesized_type (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.trans_token (Run.matcher_token v1),
                      trans_expression_list (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dec_statement ((kind, body) : mt) : CST.dec_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Const_decl (
            trans_const_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_decl (
            trans_type_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Var_decl (
            trans_var_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_default_case ((kind, body) : mt) : CST.default_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_statement_list (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_defer_statement ((kind, body) : mt) : CST.defer_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Sele_exp (
            trans_selector_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Index_exp (
            trans_index_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Slice_exp (
            trans_slice_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Type_asse_exp (
            trans_type_assertion_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Type_conv_exp (
            trans_type_conversion_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Choice_new (
            (match v with
            | Alt (0, v) ->
                `New (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Make (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Comp_lit (
            trans_composite_literal (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Func_lit (
            trans_func_literal (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Choice_raw_str_lit (
            (match v with
            | Alt (0, v) ->
                `Raw_str_lit (
                  trans_raw_string_literal (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Inte_str_lit (
                  trans_interpreted_string_literal (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Int_lit (
            trans_int_literal (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Float_lit (
            trans_float_literal (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Imag_lit (
            trans_imaginary_literal (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Rune_lit (
            trans_rune_literal (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Nil (
            trans_nil (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Iota (
            trans_iota (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_case ((kind, body) : mt) : CST.expression_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression_list (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statement_list (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_list ((kind, body) : mt) : CST.expression_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_switch_statement ((kind, body) : mt) : CST.expression_switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_simple_statement (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp_case (
                      trans_expression_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Defa_case (
                      trans_default_case (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id_rep_COMMA_id_choice_simple_type (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_identifier (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        (match v2 with
                        | Alt (0, v) ->
                            `Simple_type (
                              trans_simple_type (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Paren_type (
                              trans_parenthesized_type (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_STAR_choice_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        (match v1 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Qual_type (
                              trans_qualified_type (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Raw_str_lit (
                      trans_raw_string_literal (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Inte_str_lit (
                      trans_interpreted_string_literal (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration_list ((kind, body) : mt) : CST.field_declaration_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_field_declaration (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                (match v0 with
                                | Alt (0, v) ->
                                    `LF (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `SEMI (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                                ,
                                trans_field_declaration (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_clause ((kind, body) : mt) : CST.for_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_simple_statement (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_expression (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_simple_statement (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `For_clause (
                      trans_for_clause (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Range_clause (
                      trans_range_clause (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_func_literal ((kind, body) : mt) : CST.func_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param_list (
                      trans_parameter_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Simple_type (
                      trans_simple_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_block (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param_list (
                      trans_parameter_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Simple_type (
                      trans_simple_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generic_type ((kind, body) : mt) : CST.generic_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Qual_type (
                  trans_qualified_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_type_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_go_statement ((kind, body) : mt) : CST.go_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_simple_statement (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_expression (Run.matcher_token v2),
            trans_block (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Blk (
                            trans_block (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `If_stmt (
                            trans_if_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_implicit_length_array_type ((kind, body) : mt) : CST.implicit_length_array_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inc_statement ((kind, body) : mt) : CST.inc_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_index_expression ((kind, body) : mt) : CST.index_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_body ((kind, body) : mt) : CST.interface_body =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Meth_spec (
            trans_method_spec (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inte_type_name (
            trans_interface_type_name (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_elem (
            trans_constraint_elem (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Struct_elem (
            trans_struct_elem (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interface_type ((kind, body) : mt) : CST.interface_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_interface_body (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                (match v0 with
                                | Alt (0, v) ->
                                    `LF (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `SEMI (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                                ,
                                trans_interface_body (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_keyed_element ((kind, body) : mt) : CST.keyed_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_literal_element (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_literal_element (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_literal_element ((kind, body) : mt) : CST.literal_element =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Lit_value (
            trans_literal_value (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_literal_value ((kind, body) : mt) : CST.literal_value =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                (match v0 with
                                | Alt (0, v) ->
                                    `Lit_elem (
                                      trans_literal_element (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Keyed_elem (
                                      trans_keyed_element (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                                ,
                                Run.repeat
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1] ->
                                        (
                                          Run.trans_token (Run.matcher_token v0),
                                          (match v1 with
                                          | Alt (0, v) ->
                                              `Lit_elem (
                                                trans_literal_element (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Keyed_elem (
                                                trans_keyed_element (Run.matcher_token v)
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_map_type ((kind, body) : mt) : CST.map_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_spec ((kind, body) : mt) : CST.method_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param_list (
                      trans_parameter_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Simple_type (
                      trans_simple_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_declaration ((kind, body) : mt) : CST.parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_identifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_identifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_list ((kind, body) : mt) : CST.parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                (match v0 with
                                | Alt (0, v) ->
                                    `Param_decl (
                                      trans_parameter_declaration (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Vari_param_decl (
                                      trans_variadic_parameter_declaration (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                                ,
                                Run.repeat
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1] ->
                                        (
                                          Run.trans_token (Run.matcher_token v0),
                                          (match v1 with
                                          | Alt (0, v) ->
                                              `Param_decl (
                                                trans_parameter_declaration (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Vari_param_decl (
                                                trans_variadic_parameter_declaration (Run.matcher_token v)
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type ((kind, body) : mt) : CST.parenthesized_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pointer_type ((kind, body) : mt) : CST.pointer_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_range_clause ((kind, body) : mt) : CST.range_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression_list (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `EQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `COLONEQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_receive_statement ((kind, body) : mt) : CST.receive_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression_list (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `EQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `COLONEQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_expression_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_select_statement ((kind, body) : mt) : CST.select_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Comm_case (
                      trans_communication_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Defa_case (
                      trans_default_case (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_selector_expression ((kind, body) : mt) : CST.selector_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_send_statement ((kind, body) : mt) : CST.send_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_short_var_declaration ((kind, body) : mt) : CST.short_var_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression_list (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression_list (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_statement ((kind, body) : mt) : CST.simple_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Send_stmt (
            trans_send_statement (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inc_stmt (
            trans_inc_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Dec_stmt (
            trans_dec_statement (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Assign_stmt (
            trans_assignment_statement (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Short_var_decl (
            trans_short_var_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_type ((kind, body) : mt) : CST.simple_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Gene_type (
            trans_generic_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Qual_type (
            trans_qualified_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Poin_type (
            trans_pointer_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Struct_type (
            trans_struct_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Inte_type (
            trans_interface_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Array_type (
            trans_array_type (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Slice_type (
            trans_slice_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Map_type (
            trans_map_type (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Chan_type (
            trans_channel_type (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_slice_expression ((kind, body) : mt) : CST.slice_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Opt_exp_COLON_opt_exp (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.opt
                          (fun v -> trans_expression (Run.matcher_token v))
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> trans_expression (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_exp_COLON_exp_COLON_exp (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4] ->
                      (
                        Run.opt
                          (fun v -> trans_expression (Run.matcher_token v))
                          v0
                        ,
                        Run.trans_token (Run.matcher_token v1),
                        trans_expression (Run.matcher_token v2),
                        Run.trans_token (Run.matcher_token v3),
                        trans_expression (Run.matcher_token v4)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_slice_type ((kind, body) : mt) : CST.slice_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_special_argument_list ((kind, body) : mt) : CST.special_argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement ((kind, body) : mt) : CST.statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Decl (
            trans_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Simple_stmt (
            trans_simple_statement (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Ret_stmt (
            trans_return_statement (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Go_stmt (
            trans_go_statement (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Defer_stmt (
            trans_defer_statement (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `If_stmt (
            trans_if_statement (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `For_stmt (
            trans_for_statement (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Exp_switch_stmt (
            trans_expression_switch_statement (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Type_switch_stmt (
            trans_type_switch_statement (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Select_stmt (
            trans_select_statement (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Labe_stmt (
            trans_labeled_statement (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Fall_stmt (
            trans_fallthrough_statement (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Brk_stmt (
            trans_break_statement (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Cont_stmt (
            trans_continue_statement (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Goto_stmt (
            trans_goto_statement (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Blk (
            trans_block (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Empty_stmt (
            trans_empty_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement_list ((kind, body) : mt) : CST.statement_list =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stmt_rep_choice_LF_stmt_opt_choice_LF_opt_empty_labe_stmt (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_statement (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `LF (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `SEMI (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            trans_statement (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `LF (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `SEMI (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.opt
                              (fun v ->
                                trans_empty_labeled_statement (Run.matcher_token v)
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Empty_labe_stmt (
            trans_empty_labeled_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_elem ((kind, body) : mt) : CST.struct_elem =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_struct_term (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_struct_term (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_term ((kind, body) : mt) : CST.struct_term =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `TILDE (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_struct_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_type ((kind, body) : mt) : CST.struct_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_declaration_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_alias ((kind, body) : mt) : CST.type_alias =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_arguments ((kind, body) : mt) : CST.type_arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Simple_type (
                            trans_simple_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Paren_type (
                            trans_parenthesized_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_assertion_expression ((kind, body) : mt) : CST.type_assertion_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_case ((kind, body) : mt) : CST.type_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Simple_type (
                            trans_simple_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Paren_type (
                            trans_parenthesized_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_statement_list (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_conversion_expression ((kind, body) : mt) : CST.type_conversion_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_declaration ((kind, body) : mt) : CST.type_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type_spec (
                  trans_type_spec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_alias (
                  trans_type_alias (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `LPAR_rep_choice_type_spec_choice_LF_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  (match v0 with
                                  | Alt (0, v) ->
                                      `Type_spec (
                                        trans_type_spec (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Type_alias (
                                        trans_type_alias (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                  ,
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `LF (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `SEMI (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter_list ((kind, body) : mt) : CST.type_parameter_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parameter_declaration (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_parameter_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_spec ((kind, body) : mt) : CST.type_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_switch_header ((kind, body) : mt) : CST.type_switch_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_simple_statement (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_expression_list (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_switch_statement ((kind, body) : mt) : CST.type_switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_switch_header (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Type_case (
                      trans_type_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Defa_case (
                      trans_default_case (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `HAT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `STAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `AMP (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `LTDASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_var_declaration ((kind, body) : mt) : CST.var_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Var_spec (
                  trans_var_spec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_rep_var_spec_choice_LF_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_var_spec (Run.matcher_token v0),
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `LF (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `SEMI (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_var_spec ((kind, body) : mt) : CST.var_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Choice_simple_type_opt_EQ_exp_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Simple_type (
                              trans_simple_type (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Paren_type (
                              trans_parenthesized_type (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_expression_list (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `EQ_exp_list (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression_list (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variadic_argument ((kind, body) : mt) : CST.variadic_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variadic_parameter_declaration ((kind, body) : mt) : CST.variadic_parameter_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Paren_type (
                  trans_parenthesized_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_spec_list ((kind, body) : mt) : CST.import_spec_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_import_spec (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `LF (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_type_parameter_list (Run.matcher_token v))
              v2
            ,
            trans_parameter_list (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param_list (
                      trans_parameter_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Simple_type (
                      trans_simple_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_method_declaration ((kind, body) : mt) : CST.method_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parameter_list (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_parameter_list (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param_list (
                      trans_parameter_list (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Simple_type (
                      trans_simple_type (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.opt
              (fun v -> trans_block (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_import_declaration ((kind, body) : mt) : CST.import_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Import_spec (
                  trans_import_spec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_spec_list (
                  trans_import_spec_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Stmt_choice_LF (
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_statement (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `LF (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
          | Alt (1, v) ->
              `Choice_pack_clause_opt_choice_LF (
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pack_clause (
                            trans_package_clause (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Func_decl (
                            trans_function_declaration (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Meth_decl (
                            trans_method_declaration (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Import_decl (
                            trans_import_declaration (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `LF (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `SEMI (
                                Run.trans_token (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_source_file matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

